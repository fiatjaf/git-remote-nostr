package main

import (
	"io"
	"os"
	"path/filepath"

	"github.com/cryptix/exp/git"
	"github.com/pkg/errors"
)

// "fetch $sha1 $ref" method 1 - unpacking loose objects
//   - look for it in ".git/objects/substr($sha1, 0, 2)/substr($sha, 2)"
//   - if found, download it and put it in place. (there may be a command for this)
//   - done \o/
func fetchObject(sha1 string) error {
	return recurseCommit(sha1)
}

func recurseCommit(sha1 string) error {
	obj, err := fetchAndWriteObj(sha1)
	if err != nil {
		return errors.Wrapf(err, "fetchAndWriteObj(%s) commit object failed", sha1)
	}
	commit, ok := obj.Commit()
	if !ok {
		return errors.Errorf("sha1<%s> is not a git commit object:%s ", sha1, obj)
	}
	if commit.Parent != "" {
		if err := recurseCommit(commit.Parent); err != nil {
			return errors.Wrapf(err, "recurseCommit(%s) commit Parent failed", commit.Parent)
		}
	}
	return fetchTree(commit.Tree)
}

func fetchTree(sha1 string) error {
	obj, err := fetchAndWriteObj(sha1)
	if err != nil {
		return errors.Wrapf(err, "fetchAndWriteObj(%s) commit tree failed", sha1)
	}
	entries, ok := obj.Tree()
	if !ok {
		return errors.Errorf("sha1<%s> is not a git tree object:%s ", sha1, obj)
	}
	for _, t := range entries {
		obj, err := fetchAndWriteObj(t.SHA1Sum.String())
		if err != nil {
			return errors.Wrapf(err, "fetchAndWriteObj(%s) commit tree failed", sha1)
		}
		if obj.Type != git.BlobT {
			return errors.Errorf("sha1<%s> is not a git tree object:%s ", t.SHA1Sum.String(), obj)
		}
	}
	return nil
}

// fetchAndWriteObj looks for the loose object under 'repo' global git dir
// and usses an io.TeeReader to write it to the local repo
func fetchAndWriteObj(sha1 string) (*git.Object, error) {
	p := filepath.Join(ipfsRepoPath, "objects", sha1[:2], sha1[2:])
	ipfsCat, err := ipfsShell.Cat(p)
	if err != nil {
		return nil, errors.Wrapf(err, "shell.Cat() commit failed")
	}
	targetP := filepath.Join(repo, "objects", sha1[:2], sha1[2:])
	if err := os.MkdirAll(filepath.Join(repo, "objects", sha1[:2]), 0700); err != nil {
		return nil, errors.Wrapf(err, "mkDirAll() failed")
	}
	targetObj, err := os.Create(targetP)
	if err != nil {
		return nil, errors.Wrapf(err, "os.Create(%s) commit failed", targetP)
	}
	obj, err := git.DecodeObject(io.TeeReader(ipfsCat, targetObj))
	if err != nil {
		return nil, errors.Wrapf(err, "git.DecodeObject(commit) failed")
	}

	if err := ipfsCat.Close(); err != nil {
		err = errors.Wrap(err, "ipfs/cat Close failed")
		if errRm := os.Remove(targetObj.Name()); errRm != nil {
			err = errors.Wrapf(err, "failed removing targetObj: %s", errRm)
			return nil, err
		}
		return nil, errors.Wrapf(err, "closing ipfs cat failed")
	}

	if err := targetObj.Close(); err != nil {
		return nil, errors.Wrapf(err, "target file close() failed")
	}

	return obj, nil
}
